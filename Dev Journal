how do we pass data from the unit to the combat manager? 

Who knows when the camera is in position?
-Not the camera manager
-Not the unit
-Only the combat manager knows when it put the camera in position. 
    -But the combat manager doesn't know anything about the unit. 


Unit sends it's junk to combat manager right before the camera calls to move?
Then the combat manager has all the unit's ID by the time the camera rolls in. 

We have sucessfully added a solid trigger to the unit. Now, we need to make sure that the pause feature works as needed. 
The problem is what happens if units reach the point at exactly the same time? 

There's a bug where moving three units onto the node does not trigger three seperate combat moments. 
Having the units give their orders based on if they arrived or not may have problems when moving more than one unit. 
And we will want multi-unit movements using card plays. 

We have onselected hold the full list of units. Maybe use that to go through units turn by turn? 
Maybe look further into the game and see how multiple units can reach the same point at the same time. 
Possibly vary the unit's speeds using a weighted randomizer?
    -> Significantly reduces the chance units run into the node at the same exact time. 
    -> But does not completely eliminate it. There might still be a single possible edge case where units do slip together.
    -> And players would absolutely hate that. 
    -> So while this is an easy way out, it's not a solid way out. 

    -> Further testing finds this very, very difficult to replicate without even modifying movespeed.
    -> Perhaps it might be a solution?
    -> No this is dumb. I'm not going to hazard even a 1 in a billion chance of disapointing a player by having their unit skip a turn. 
    
    -> We could store a list of gameobjects and have it go a first in last out setup. 
        -> So combat manager stores gameobjects. each time the camera is ready to roll, it grabs one of those and plays it.
        -> Once it's played, it's removed from the list. 
        -> We could even have the combat itself triggered only if the list has a size > 0.

Problem is that each unit triggers combat. 
But combat is setup to be resolved as a group. 
Which means that moving three units into the fight triggers each unit before the combat is resolved. 
It's a wonder that hasn't crashed. 

I need to find a way to trigger combat as a group. 
The only place where the player selects once is on the onselected script. 
Maybe I should have it hook up a check for combat. 

This did not work. Not at all. The list idea is good, but the trigger needs to be fired only once. 
We can revisit that later. 

At the moment, I think it's not possible for a unit to reach their target at the same exact nano-second as another. 
It might be better to keep the setup as is for now. 

NEVERMIND - Problem happened again where one unit was skipped for no reason. Couldn't find even a call on the debuglog.
This problem might only happen once in 20 attemps. But that's still hella bad results. 
Still not a major problem right now though, but it'll need to be fixed. 

Today's agenda will be to bring up the sprites to the camera. 
To do that we'll need to know the target and the calling unit. 
Attention should be put to making the target(s) something scalable. We know only one unit calls up the action but there may be multiple targets. 

AH! But what if we impliment a small time delay when moving units so they arrive in single file line? So when we move, they don't move all at once but instead one after another.
Time delay of .2 seconds would work just fine enough probably. I can impliment this on our on-select code. 

Got that implimented, messily, but it works. Just not enough to make me confident in it. There's still a possible chance of it going wrong. 
Still, I learned using a recursive timer call might work for our original list idea. Ultimately we'll need to impliment that instead. 
But for now it works and I'm moving on, up until it doesn't. I'll leave a comment for future me to remember this possible avenue for solution. 
This certainly won't come back to bite me later, no sir. 

I should impliment more try/catch, make it a general rule to do that. Will help debugging. 

Let's think more about combat. 
-> Units have favorite tactics. 
-> Unit classes affect who they tend to target.
    -> Vanguard is first target for all units except assassins who bypass vanguards. 
    -> After that the list are variable depending on which class. 
Where do we impliment this? 

It can't be inside a tactic. The unit selects a target first, and then selects it's tactic. 
Tactic should have no say in who it targets. 

Should this be impliment in UnitCore, or in the combat controller?
It's the unit that selects it's target. This filter should be set inside unitcore. 

Created a struct in UnitCore that returns a list of targets and a selected tactic. 
Now we have to figure out how to best set this up. 

Tactics could be used on friendly allies. 
And sometimes, units will prioritize those tactics even if they could attack an enemy.
This will affect the targets, obviously.  
But currently our select target and select tactics methods do not communicate at all with each other. 
Let's break it down. 

When a unit walks onto a node, it should scan to see if there's anyone home. 
Units have favorite tactics to use, and favorite targets. 
-> So during our select target we should prioritize those targets. (Modify selectTarget)
-> Tactics should be based on if the targets are friendly or enemy. 

Why not just grab every piece of info possible and send it. Then have the tactic be used on whichever?
E.G. generically always grab all the enemies, and all the allies, and then use both? 
We could have Unit hold two tactics list, one for supporting tactics and one for attacking ones.
Or we add a check on each tactic if it's supporting or attacking, and filter through using that. 

Setting up something this complicated is impossible to do upfront. 
Instead, I should add as needed. This might take me longer but I'll have immidiate testing. 
Then again, good planning will save me some time in the long run. 
But I have all the time in the world. 

Let's sum up all the variables together and what it means:
-> Units have favorite tactics
-> Tactics are either supporting or attacking
-> Units will opt to pick between a supporting and attacking tactic based on their temperment. 
-> The same tactic can be used by both enemy and ally (Targetting list taken must be assumed valid.)
-> Units have favorite targets. (Send a list of all units on node in decending order?)
-> Nodes and units all have modifiers that affect how much a tactic does. 
    -> Should be handled inside the tactic. (Send Node info to tactic.)
-> Multiple targets. Which means time needs to be placed for each target. 


Tactic takes a node, a calling unit, and a single target to apply stuff to.
    -> The unit given is assumed the right faction and the right priority for the calling unit. 
    -> Tactic will lookup the calling unit's class and apply modifiers as needed.
    -> Tactic will lookup the node's special effects and apply modifiers as needed.
    -> Tactic will only give combat manager information to work with. It will not puppeteer anything. 

UnitCore needs a function to pick a favored tactic based on the unit's parameters. 
UnitCore needs a function to pick a sorted list of targets based on the unit's parameters. 
UnitCore hands these two to CombatManager. 
CombatManager needs to loop through a given list of targets, using the tactic chosen as the size of the loop. 
-> In each loop, the tactic needs to be called again, as each target might change the values the tactic returns. 
-> CombatManager needs to use tactics to assign damage/healing, ect to units at the right time.

All of this needs to be modular enough new check functions can be added into it. 


So TODO: 
UnitCore needs a function to pick a favored tactic based on the unit's parameters. 
UnitCore needs a function to pick a sorted list of targets based on the unit's parameters. 
UnitCore hands these two to CombatManager. 
CombatManager needs to loop through a given list of targets, using the tactic chosen as the size of the loop. 

Should make Debug Tactics:

1) Debug_RandomSingleAttack - Targets a random enemy unit and deals damage. 
2) Debug_RandomMultiAttack - Targets 2 random enemy units and deal damage. 
3) Debug_HealSingleTarget - Targets a random ally and heals damage. 
4) Debug_HealMultiTarget - Targets 2 random allies and heals damage. 

Implimented a random single attack correctly. Currently working on the healing version of it. 
Not suprisingly, healing and damaging are just flip sides of the same coin. 
The real meat is getting the correct targets lined up. Or rather, filtering the targets.

Now there needs to be a way to stop a support unit from using it's buff on itself. 
Done, but now there's more filtering to do. 

Done with that part. 
Now, TODO is to impliment a method for multiple-targets. If done right, this should also work for multi-target support tactics.

Ok, after taking a break and doing a lot of whiteboarding I have come to the conclusion that my current setup is not good long term.
How combat is triggered is not correct. Which means movement itself is also not designed well. 

I don't feel like I've got enough control over movement and combat. They feel like juggling spinning plates. 
To start, I'll modify movement so that it's not based on a single unit arriving on the node. 
Instead, units selected will all move togethre to the target place, and once each arrive they'll turn a flag on themselves saying they're done moving. 
Once all selected units report that they're done moving, then I'll go through each and ask them to resolve combat. 
This should be a cleaner system and more manageable. 

Combat itself is a mess. There's too many possible injections in the future for a static system. 
What if I want dialog to also pop up every now and then in combat? 
What if there's a story event that needs to happen during combat?
What if the unit's turn of order is changed unexpectedly? 

If I make it all in one combat manager, that script has to handle every possible event. Which makes it big. 
And events depend on previous events to be made, which makes it a callback hell of nested corutines.
Since time is a factor and things need to physically wait for others to complete. 

Instead of trying to script this, I'm going to make a behavorial tree. 
Each function will be a node instead. (Move camera up, Move camera back, Bring sprite up, start tactic, ect.)
The tree will have all my conditions and will run the nodes. 
Keeping all the logic without the implimentation on one script will keep it easier to organize. 
It'll still be really long, but at least not cluttered. 

Each node however will be a longer function since it'll be designed to work with minimal parameters and connections. 
But I'll be able to divide all this out. 

I don't think designing tactics as "Suport" or "Attack" is good. While it make it simple, it also limits game design too much. 
What about tactics that deal damage to an enemy and then buffs a friend?
I'll continue thinking about this. 

So far I'm considering either having all tactics contain an attack part and a support part. 
So a pure attacking tactic will have the attack part filled out, and the support part will be empty. 
Vice versa. 
This lets me standardize tactics somewhat, while leaving me the option to do stuff with it.
But it will make it more difficult for a unit to know which it's supposed to use more often of. 

I could also add a third category. Have a support tactic, an attacking tactic, or a hybrid tactic. 
Choices choices. I think the previous option is a better pick, but I'll need to think on it more. 

